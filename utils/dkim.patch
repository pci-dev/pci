diff --git a/gluon/tools.py b/gluon/tools.py
index 1627d49b..2122f465 100644
--- a/gluon/tools.py
+++ b/gluon/tools.py
@@ -311,6 +311,8 @@ class Mail(object):
              raw=False,
              headers={},
              from_address=None,
+             dkim=None,
+             list_unsubscribe=None,
              cipher_type=None,
              sign=None,
              sign_passphrase=None,
@@ -766,6 +768,12 @@ class Mail(object):
         payload['Date'] = email.utils.formatdate()
         for k, v in iteritems(headers):
             payload[k] = encoded_or_raw(to_unicode(v, encoding))
+
+        if list_unsubscribe:
+            payload['List-Unsubscribe'] = "<mailto:%s>" % list_unsubscribe
+        if dkim:
+            payload['DKIM-Signature'] = dkim_sign(payload, dkim.key, dkim.selector)
+
         result = {}
         try:
             if self.settings.server == 'logging':
@@ -852,6 +860,38 @@ class Mail(object):
         return True
 
 
+def dkim_sign(payload, dkim_key, dkim_selector):
+
+    import dkim
+
+    # sign all existing mail headers except those specified in
+    # http://dkim.org/specs/rfc4871-dkimbase.html#rfc.section.5.5
+    headers = list(filter(
+        lambda h: h not in [
+            "Return-Path",
+            "Received",
+            "Comments",
+            "Keywords",
+            "Resent-Bcc",
+            "Bcc",
+            "DKIM-Signature",
+        ],
+        payload))
+
+    domain = re.sub(r".*@", "", payload["From"])
+    domain = re.sub(r">.*", "", domain)
+
+    sig = dkim.sign(
+            message=payload.as_bytes(),
+            selector=dkim_selector.encode(),
+            domain=domain.encode(),
+            privkey=dkim_key.encode(),
+            include_headers=[h.encode() for h in headers])
+
+    return sig[len("DKIM-Signature: "):].decode()
+
+
+
 class Recaptcha2(DIV):
     """
     Experimental:
